package io.objects.tl.api.request;

import static io.objects.tl.StreamUtils.*;
import static io.objects.tl.TLObjectUtils.*;

import io.objects.tl.TLContext;
import io.objects.tl.api.TLAbsSecureValueType;
import io.objects.tl.api.TLSecureValue;
import io.objects.tl.core.TLMethod;
import io.objects.tl.core.TLVector;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;

/**
 * This class is generated by Mono's TL class generator
 */
public class TLRequestAccountGetSecureValue extends TLMethod<TLVector<TLSecureValue>> {
    public static final int CONSTRUCTOR_ID = 0x73665bc2;

    protected TLVector<TLAbsSecureValueType> types;

    private final String _constructor = "account.getSecureValue#73665bc2";

    public TLRequestAccountGetSecureValue() {
    }

    public TLRequestAccountGetSecureValue(TLVector<TLAbsSecureValueType> types) {
        this.types = types;
    }

    @Override
    @SuppressWarnings({"unchecked", "SimplifiableConditionalExpression"})
    public TLVector<TLSecureValue> deserializeResponse(InputStream stream, TLContext context) throws
            IOException {
        return readTLVector(stream, context);
    }

    @Override
    public void serializeBody(OutputStream stream) throws IOException {
        writeTLVector(types, stream);
    }

    @Override
    @SuppressWarnings({"unchecked", "SimplifiableConditionalExpression"})
    public void deserializeBody(InputStream stream, TLContext context) throws IOException {
        types = readTLVector(stream, context);
    }

    @Override
    public int computeSerializedSize() {
        int size = SIZE_CONSTRUCTOR_ID;
        size += types.computeSerializedSize();
        return size;
    }

    @Override
    public String toString() {
        return _constructor;
    }

    @Override
    public int getConstructorId() {
        return CONSTRUCTOR_ID;
    }

    public TLVector<TLAbsSecureValueType> getTypes() {
        return types;
    }

    public void setTypes(TLVector<TLAbsSecureValueType> types) {
        this.types = types;
    }
}
